@page "/CreateDrink"
@using Firebase.Database;
@using Firebase.Database.Query;
@using System.Threading.Tasks;
@using Blazored.LocalStorage;

@using EAT_BO.Models;

@inject NavigationManager navigationManager
@inject ILocalStorageService session

@{
    var sessKey = ((LocalStorageService)session).Key(0);
    var hasSession = sessKey != null ? ((LocalStorageService)session).GetItem<string>(sessKey).Equals("COMPANY") : false;
}

@if (hasSession)
{
    <h1>Create Drink</h1>
    <br />
    <br />
    <br />

    <div class="BodyContent">
        <div class="form-group">
            <input type="text" @bind="@name" class="form-control input-lg" placeholder="Name" autofocus />
        </div>
        <div class="form-group" style="display: flex;">
            <label for="isAvailable" class="col-md-2 col-lg-2 com-xs-2 col-sm-2 form-check-label" style="align-items: center; display: flex;">Available?</label>
            <input type="checkbox" name="isAvailable" @bind="@isAvailable" class="col-md-4 col-lg-4 col-xs-4 col-sm-4 form-check-inline form-control" style="text-align: left;" />
        </div>

        <div class="form-group" style="text-align: center">
            <div class="text-danger">@errorsDisplay</div>
            <button class="btn btn-gray" @onclick="DoCreate" style="margin-top:30px; width: 300px; height: 45px; background-color:#4B4A4D; font-size: medium; color: #fff;" id="loginButton">Save Item</button>

        </div>
    </div>

    <style>
        .form-check-inline:focus {
            display: none,
        }

        .restaurant {
            display: block;
        }

            .restaurant a {
                padding-left: 5px;
                text-decoration: none;
            }
    </style>
}
else if (sessKey != null && ((LocalStorageService)session).GetItem<string>(sessKey).Equals("BO_ADMIN"))
{
    navigationManager.NavigateTo("/Users");
}
else
{
    navigationManager.NavigateTo($"/?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}");
}

@code {
    string name = "";
    string errorsDisplay = "";
    bool isAvailable = true;

    protected async Task DoCreate()
    {

        if (String.IsNullOrEmpty(name))
        {
            errorsDisplay = "Name Required";
        }

        else
        {
            var firebaseClient = new FirebaseClient("https://eat-backoffice.firebaseio.com/");

            var menu = new DrinksDessertModel()
            {
                name = name,
                isAvailable = isAvailable
            };

            await firebaseClient
                  .Child("Restaurants")
                  .Child(GetKeyEmail())
                  .Child("drinks")
                  .Child(name)
                  .PutAsync(menu);
            navigationManager.NavigateTo("/Restaurant");
        }
    }

    string GetKeyEmail()
    {
        return ((LocalStorageService)session).Key(0).Replace(".", "_").ToString();
    }
}